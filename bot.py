import logging
import json
import os
import httpx
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from telegram.request import HTTPXRequest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
WAITING_FOR_MESSAGE = 1

# ID –≥—Ä—É–ø–ø—ã –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤
PSYCHOLOGIST_GROUP_ID = -4855005984

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–∞–Ω–Ω—ã—Ö
USER_MESSAGES_FILE = "user_messages.json"
USER_DATA_FILE = "user_data.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '7830341197:AAGo6uWmeg5xumOOLa9CKxzjTLsB06Yb8KU')

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TEXTS = {
    "start": (
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º. "
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∞–Ω–æ–Ω–∏–º–Ω–æ, –∞ –ø—Å–∏—Ö–æ–ª–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º."
    ),
    "about_community": (
        "üîπ *–û —Å–æ–æ–±—â–µ—Å—Ç–≤–µ*\n\n"
        "–≠—Ç–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –ª—é–¥—è–º "
        "–≤ —Ç—Ä—É–¥–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å "
        "–∞–Ω–æ–Ω–∏–º–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞."
    ),
    "about_psychologist": (
        "üë©‚Äç‚öïÔ∏è *–û –ø—Å–∏—Ö–æ–ª–æ–≥–µ*\n\n"
        "–ù–∞—à –ø—Å–∏—Ö–æ–ª–æ–≥ - –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å "
        "–º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: "
        "—Ç—Ä–µ–≤–æ–∂–Ω—ã–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –¥–µ–ø—Ä–µ—Å—Å–∏—è, –æ—Ç–Ω–æ—à–µ–Ω–∏—è."
    ),
    "write_problem": (
        "‚úçÔ∏è *–ù–∞–ø–∏—Å–∞—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ*\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫, "
        "–∏ –æ–Ω–æ –±—É–¥–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–µ—Ä–µ–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Å–∏—Ö–æ–ª–æ–≥—É. "
        "–ü—Å–∏—Ö–æ–ª–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    ),
    "message_sent": (
        "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Å–∏—Ö–æ–ª–æ–≥—É. "
        "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç—ã, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "
        "'–û—Ç–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
    ),
    "no_responses": "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞.",
    "psychologist_response": "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞:\n\n{}"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def load_data(filename):
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_data(data, filename):
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
user_messages = load_data(USER_MESSAGES_FILE)
user_data = load_data(USER_DATA_FILE)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("–û —Å–æ–æ–±—â–µ—Å—Ç–≤–µ", callback_data="about_community"),
            InlineKeyboardButton("–û –ø—Å–∏—Ö–æ–ª–æ–≥–µ", callback_data="about_psychologist"),
        ],
        [
            InlineKeyboardButton("–û—Ç–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞", callback_data="check_response"),
            InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ", callback_data="write_problem"),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(TEXTS["start"], reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text(TEXTS["start"], reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "about_community":
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(TEXTS["about_community"], reply_markup=reply_markup, parse_mode="Markdown")
    
    elif query.data == "about_psychologist":
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(TEXTS["about_psychologist"], reply_markup=reply_markup, parse_mode="Markdown")
    
    elif query.data == "write_problem":
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(TEXTS["write_problem"], reply_markup=reply_markup, parse_mode="Markdown")
        return WAITING_FOR_MESSAGE
    
    elif query.data == "check_response":
        user_id = query.from_user.id
        responses = [k for k, v in user_messages.items() if str(v.get("user_id")) == str(user_id) and "response" in v]
        
        if not responses:
            await query.edit_message_text(TEXTS["no_responses"], reply_markup=None)
            await start(update, context)
        else:
            for message_id in responses:
                response_data = user_messages[message_id]
                await context.bot.send_message(
                    chat_id=user_id,
                    text=TEXTS["psychologist_response"].format(response_data['response']),
                )
                # –ü–æ–º–µ—á–∞–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π
                user_messages[message_id]["answered"] = True
                save_data(user_messages, USER_MESSAGES_FILE)
            await start(update, context)
    
    elif query.data == "back_to_main":
        await start(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    chat_id = update.message.chat_id
    
    try:
        if update.message.video_note:
            sent_message = await context.bot.send_video_note(
                chat_id=PSYCHOLOGIST_GROUP_ID,
                video_note=update.message.video_note.file_id,
            )
            message_type = "video_note"
        elif update.message.text:
            sent_message = await context.bot.send_message(
                chat_id=PSYCHOLOGIST_GROUP_ID,
                text=f"–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{update.message.text}",
            )
            message_type = "text"
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫.")
            return WAITING_FOR_MESSAGE
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        user_messages[str(sent_message.message_id)] = {
            "user_id": user.id,
            "user_message_id": update.message.message_id,
            "message_type": message_type,
            "answered": False
        }
        save_data(user_messages, USER_MESSAGES_FILE)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if str(user.id) not in user_data:
            user_data[str(user.id)] = {"messages": {}, "last_answer": None}
        
        user_data[str(user.id)]["messages"][str(update.message.message_id)] = {
            "text": update.message.text or "video_note",
            "answered": False
        }
        save_data(user_data, USER_DATA_FILE)
        
        await update.message.reply_text(TEXTS["message_sent"])
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await start(update, context)
    return ConversationHandler.END

async def handle_psychologist_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.id != PSYCHOLOGIST_GROUP_ID:
        return
    
    if not update.message.reply_to_message:
        return
    
    replied_message_id = str(update.message.reply_to_message.message_id)
    
    if replied_message_id not in user_messages:
        return
    
    user_data = user_messages[replied_message_id]
    user_id = user_data["user_id"]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞
    response_text = update.message.text or update.message.caption or "–ü—Å–∏—Ö–æ–ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏–ª –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    user_messages[replied_message_id]["response"] = response_text
    user_messages[replied_message_id]["answered"] = True
    save_data(user_messages, USER_MESSAGES_FILE)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º user_data
    if str(user_id) in user_data:
        for msg_id, msg_data in user_data[str(user_id)]["messages"].items():
            if msg_data.get("user_message_id") == replied_message_id:
                msg_data["answered"] = True
                user_data[str(user_id)]["last_answer"] = response_text
                break
        save_data(user_data, USER_DATA_FILE)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=TEXTS["psychologist_response"].format(response_text),
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)
    return ConversationHandler.END

def main():
    if not BOT_TOKEN:
        logger.error("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        return
    
    # –°–æ–∑–¥–∞–µ–º Application —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º HTTP-–∫–ª–∏–µ–Ω—Ç–æ–º
    application = Application.builder() \
        .token(BOT_TOKEN) \
        .request(HTTPXRequest(http_version="1.1")) \
        .build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start), CallbackQueryHandler(button_handler)],
        states={
            WAITING_FOR_MESSAGE: [
                MessageHandler(filters.TEXT | filters.VIDEO_NOTE, handle_message)
            ],
        },
        fallbacks=[CallbackQueryHandler(cancel, pattern="back_to_main")],
    )
    
    application.add_handler(conv_handler)
    application.add_handler(
        MessageHandler(
            filters.TEXT & ~filters.COMMAND & filters.Chat(PSYCHOLOGIST_GROUP_ID),
            handle_psychologist_response
        )
    )
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()