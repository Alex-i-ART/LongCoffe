import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
WAITING_FOR_MESSAGE = 1

# ID –≥—Ä—É–ø–ø—ã –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
PSYCHOLOGIST_GROUP_ID = -4855005984  # –ü—Ä–∏–º–µ—Ä: -1001234567890

# –¢–µ–∫—Å—Ç—ã
START_MESSAGE = (
    "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º. "
    "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∞–Ω–æ–Ω–∏–º–Ω–æ, –∞ –ø—Å–∏—Ö–æ–ª–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º."
)

ABOUT_COMMUNITY = (
    "üîπ *–û —Å–æ–æ–±—â–µ—Å—Ç–≤–µ*\n\n"
    "–≠—Ç–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –ª—é–¥—è–º "
    "–≤ —Ç—Ä—É–¥–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å "
    "–∞–Ω–æ–Ω–∏–º–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞."
)

ABOUT_PSYCHOLOGIST = (
    "üë©‚Äç‚öïÔ∏è *–û –ø—Å–∏—Ö–æ–ª–æ–≥–µ*\n\n"
    "–ù–∞—à –ø—Å–∏—Ö–æ–ª–æ–≥ - –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å "
    "–º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: "
    "—Ç—Ä–µ–≤–æ–∂–Ω—ã–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –¥–µ–ø—Ä–µ—Å—Å–∏—è, –æ—Ç–Ω–æ—à–µ–Ω–∏—è."
)

WRITE_PROBLEM_TEXT = (
    "‚úçÔ∏è *–ù–∞–ø–∏—Å–∞—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ*\n\n"
    "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫, "
    "–∏ –æ–Ω–æ –±—É–¥–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–µ—Ä–µ–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Å–∏—Ö–æ–ª–æ–≥—É. "
    "–ü—Å–∏—Ö–æ–ª–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–≤–µ—Ç–∞–º–∏
user_messages = {}  # {message_id_in_group: {"user_id": user_id, "user_message_id": message_id}}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("–û —Å–æ–æ–±—â–µ—Å—Ç–≤–µ", callback_data="about_community"),
            InlineKeyboardButton("–û –ø—Å–∏—Ö–æ–ª–æ–≥–µ", callback_data="about_psychologist"),
        ],
        [
            InlineKeyboardButton("–û—Ç–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞", callback_data="check_response"),
            InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ", callback_data="write_problem"),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(START_MESSAGE, reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text(START_MESSAGE, reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "about_community":
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(ABOUT_COMMUNITY, reply_markup=reply_markup, parse_mode="Markdown")
    
    elif query.data == "about_psychologist":
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(ABOUT_PSYCHOLOGIST, reply_markup=reply_markup, parse_mode="Markdown")
    
    elif query.data == "write_problem":
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(WRITE_PROBLEM_TEXT, reply_markup=reply_markup, parse_mode="Markdown")
        return WAITING_FOR_MESSAGE
    
    elif query.data == "check_response":
        user_id = query.from_user.id
        responses = [k for k, v in user_messages.items() if v["user_id"] == user_id and "response" in v]
        
        if not responses:
            await query.edit_message_text("–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞.", reply_markup=None)
            await start(update, context)
        else:
            for message_id in responses:
                response_data = user_messages[message_id]
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"–û—Ç–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞:\n\n{response_data['response']}",
                )
            await start(update, context)
    
    elif query.data == "back_to_main":
        await start(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    chat_id = update.message.chat_id
    
    if update.message.video_note:  # –í–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫ –≤ –≥—Ä—É–ø–ø—É –ø—Å–∏—Ö–æ–ª–æ–≥–∞
        sent_message = await context.bot.send_video_note(
            chat_id=PSYCHOLOGIST_GROUP_ID,
            video_note=update.message.video_note.file_id,
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        user_messages[sent_message.message_id] = {
            "user_id": user.id,
            "user_message_id": update.message.message_id,
        }
        
        await update.message.reply_text(
            "–í–∞—à–µ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Å–∏—Ö–æ–ª–æ–≥—É. "
            "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç—ã, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "
            "'–û—Ç–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
        )
    
    elif update.message.text:  # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –≥—Ä—É–ø–ø—É –ø—Å–∏—Ö–æ–ª–æ–≥–∞
        sent_message = await context.bot.send_message(
            chat_id=PSYCHOLOGIST_GROUP_ID,
            text=f"–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{update.message.text}",
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        user_messages[sent_message.message_id] = {
            "user_id": user.id,
            "user_message_id": update.message.message_id,
        }
        
        await update.message.reply_text(
            "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Å–∏—Ö–æ–ª–æ–≥—É. "
            "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç—ã, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "
            "'–û—Ç–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
        )
    
    await start(update, context)
    return ConversationHandler.END

async def handle_psychologist_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.id != PSYCHOLOGIST_GROUP_ID:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not update.message.reply_to_message:
        return
    
    replied_message_id = update.message.reply_to_message.message_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ
    if replied_message_id not in user_messages:
        return
    
    user_data = user_messages[replied_message_id]
    user_id = user_data["user_id"]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    user_messages[replied_message_id]["response"] = update.message.text
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞:\n\n{update.message.text}",
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)
    return ConversationHandler.END

def main():
    # –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    application = Application.builder().token("7830341197:AAGo6uWmeg5xumOOLa9CKxzjTLsB06Yb8KU").build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start), CallbackQueryHandler(button_handler)],
        states={
            WAITING_FOR_MESSAGE: [MessageHandler(filters.TEXT | filters.VIDEO_NOTE, handle_message)],
        },
        fallbacks=[CallbackQueryHandler(cancel, pattern="back_to_main")],
    )
    
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Chat(PSYCHOLOGIST_GROUP_ID), handle_psychologist_response))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()


    #https://api.telegram.org/bot7830341197:AAGo6uWmeg5xumOOLa9CKxzjTLsB06Yb8KU/getUpdates