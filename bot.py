import logging
import os
import psycopg2
from psycopg2.extras import DictCursor
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from dotenv import load_dotenv
import telegram.error

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
WAITING_FOR_MESSAGE = 1

# ID –≥—Ä—É–ø–ø—ã –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤
PSYCHOLOGIST_GROUP_ID = -1002773179737

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TEXTS = {
    "start": (
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º. "
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∞–Ω–æ–Ω–∏–º–Ω–æ, –∞ –ø—Å–∏—Ö–æ–ª–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º."
    ),
    "about_community": (
        "üîπ *–û —Å–æ–æ–±—â–µ—Å—Ç–≤–µ*\n\n"
        "–≠—Ç–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –ª—é–¥—è–º "
        "–≤ —Ç—Ä—É–¥–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å "
        "–∞–Ω–æ–Ω–∏–º–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞."
    ),
    "about_psychologist": (
        "üë©‚Äç‚öïÔ∏è *–û –ø—Å–∏—Ö–æ–ª–æ–≥–µ*\n\n"
        "–ù–∞—à –ø—Å–∏—Ö–æ–ª–æ–≥ - –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å "
        "–º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: "
        "—Ç—Ä–µ–≤–æ–∂–Ω—ã–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –¥–µ–ø—Ä–µ—Å—Å–∏—è, –æ—Ç–Ω–æ—à–µ–Ω–∏—è."
    ),
    "write_problem": (
        "‚úçÔ∏è *–ù–∞–ø–∏—Å–∞—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ*\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫, "
        "–∏ –æ–Ω–æ –±—É–¥–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–µ—Ä–µ–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Å–∏—Ö–æ–ª–æ–≥—É. "
        "–ü—Å–∏—Ö–æ–ª–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    ),
    "message_sent": (
        "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Å–∏—Ö–æ–ª–æ–≥—É. "
        "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç—ã, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "
        "'–û—Ç–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
    ),
    "no_responses": "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞.",
    "psychologist_response": "üì© –í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞:\n\n{}",
    "psychologist_video_response": "üìπ –ü—Å–∏—Ö–æ–ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –≤–∏–¥–µ–æ-–æ—Ç–≤–µ—Ç"
}

class Database:
    def __init__(self):
        self.conn = None
        
    def connect(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.conn = psycopg2.connect(os.getenv('DATABASE_URL'))
            logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with self.conn.cursor() as cur:
                # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cur.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_answer TEXT
                )
                """)
                
                # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                cur.execute("""
                CREATE TABLE IF NOT EXISTS messages (
                    id SERIAL PRIMARY KEY,
                    message_id TEXT NOT NULL,
                    user_id BIGINT REFERENCES users(user_id),
                    user_message_id TEXT,
                    message_type TEXT NOT NULL,
                    text TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    answered BOOLEAN DEFAULT FALSE,
                    response TEXT,
                    response_type TEXT
                )
                """)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É response_type, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                cur.execute("""
                DO $$
                BEGIN
                    IF NOT EXISTS (
                        SELECT 1 
                        FROM information_schema.columns 
                        WHERE table_name='messages' AND column_name='response_type'
                    ) THEN
                        ALTER TABLE messages ADD COLUMN response_type TEXT;
                    END IF;
                END $$;
                """)
                
                self.conn.commit()
                logger.info("–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.conn.rollback()
            raise

    def save_user(self, user_id):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with self.conn.cursor() as cur:
                cur.execute(
                    "INSERT INTO users (user_id) VALUES (%s) ON CONFLICT (user_id) DO NOTHING",
                    (user_id,)
                )
                self.conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            self.conn.rollback()
            raise

    def save_message(self, message_data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with self.conn.cursor() as cur:
                cur.execute(
                    """
                    INSERT INTO messages 
                    (message_id, user_id, user_message_id, message_type, text)
                    VALUES (%s, %s, %s, %s, %s)
                    """,
                    (
                        message_data['message_id'],
                        message_data['user_id'],
                        message_data['user_message_id'],
                        message_data['message_type'],
                        message_data.get('text')
                    )
                )
                self.conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.conn.rollback()
            raise

    def get_pending_responses(self, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with self.conn.cursor(cursor_factory=DictCursor) as cur:
                cur.execute(
                    """
                    SELECT message_id, response, response_type 
                    FROM messages 
                    WHERE user_id = %s AND (response IS NOT NULL OR response_type = 'video_note') AND answered = FALSE
                    ORDER BY created_at
                    """,
                    (user_id,)
                )
                responses = cur.fetchall()
                
                if responses:
                    # –ü–æ–º–µ—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
                    message_ids = [r['message_id'] for r in responses]
                    cur.execute(
                        "UPDATE messages SET answered = TRUE WHERE message_id = ANY(%s)",
                        (message_ids,)
                    )
                    self.conn.commit()
                
                return responses
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤: {e}")
            self.conn.rollback()
            return []

    def save_response(self, message_id, response_text, response_type=None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞"""
        try:
            with self.conn.cursor() as cur:
                cur.execute(
                    """
                    UPDATE messages 
                    SET response = %s, answered = FALSE, response_type = %s
                    WHERE message_id = %s 
                    RETURNING user_id
                    """,
                    (response_text, response_type, message_id)
                )
                result = cur.fetchone()
                if not result:
                    return None
                
                user_id = result[0]
                cur.execute(
                    "UPDATE users SET last_answer = %s WHERE user_id = %s",
                    (response_text, user_id)
                )
                self.conn.commit()
                return user_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
            self.conn.rollback()
            return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()
db.connect()
db.init_db()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("–û —Å–æ–æ–±—â–µ—Å—Ç–≤–µ", callback_data="about_community"),
            InlineKeyboardButton("–û –ø—Å–∏—Ö–æ–ª–æ–≥–µ", callback_data="about_psychologist"),
        ],
        [
            InlineKeyboardButton("–û—Ç–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞", callback_data="check_response"),
            InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ", callback_data="write_problem"),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(TEXTS["start"], reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text(TEXTS["start"], reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "about_community":
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(TEXTS["about_community"], reply_markup=reply_markup, parse_mode="Markdown")
    
    elif query.data == "about_psychologist":
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(TEXTS["about_psychologist"], reply_markup=reply_markup, parse_mode="Markdown")
    
    elif query.data == "write_problem":
        keyboard = [[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(TEXTS["write_problem"], reply_markup=reply_markup, parse_mode="Markdown")
        return WAITING_FOR_MESSAGE
    
    elif query.data == "check_response":
        user_id = query.from_user.id
        responses = db.get_pending_responses(user_id)
        
        if not responses:
            await query.edit_message_text(TEXTS["no_responses"])
        else:
            for response in responses:
                if response['response_type'] == 'video_note':
                    await context.bot.send_video_note(
                        chat_id=user_id,
                        video_note=response['response']
                    )
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=TEXTS["psychologist_video_response"]
                    )
                else:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=TEXTS["psychologist_response"].format(response['response']),
                    )
        
        keyboard = [
            [
                InlineKeyboardButton("–û —Å–æ–æ–±—â–µ—Å—Ç–≤–µ", callback_data="about_community"),
                InlineKeyboardButton("–û –ø—Å–∏—Ö–æ–ª–æ–≥–µ", callback_data="about_psychologist"),
            ],
            [
                InlineKeyboardButton("–û—Ç–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞", callback_data="check_response"),
                InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ", callback_data="write_problem"),
            ],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=reply_markup)
    
    elif query.data == "back_to_main":
        await start(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    
    try:
        if update.message.video_note:
            sent_message = await context.bot.send_video_note(
                chat_id=PSYCHOLOGIST_GROUP_ID,
                video_note=update.message.video_note.file_id,
            )
            message_type = "video_note"
            text = None
        elif update.message.text:
            sent_message = await context.bot.send_message(
                chat_id=PSYCHOLOGIST_GROUP_ID,
                text=f"–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{update.message.text}",
            )
            message_type = "text"
            text = update.message.text
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫.")
            return WAITING_FOR_MESSAGE
        
        db.save_user(user.id)
        message_data = {
            'message_id': str(sent_message.message_id),
            'user_id': user.id,
            'user_message_id': str(update.message.message_id),
            'message_type': message_type,
            'text': text
        }
        db.save_message(message_data)
        
        keyboard = [[InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(TEXTS["message_sent"], reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return WAITING_FOR_MESSAGE
    
    return ConversationHandler.END

async def handle_psychologist_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.id != PSYCHOLOGIST_GROUP_ID or not update.message.reply_to_message:
        return
    
    replied_message_id = str(update.message.reply_to_message.message_id)
    
    if update.message.video_note:
        user_id = db.save_response(
            replied_message_id, 
            update.message.video_note.file_id,
            response_type="video_note"
        )
        if user_id:
            try:
                await context.bot.send_video_note(
                    chat_id=user_id,
                    video_note=update.message.video_note.file_id
                )
                await context.bot.send_message(
                    chat_id=user_id,
                    text=TEXTS["psychologist_video_response"]
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ-–æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    else:
        response_text = update.message.text or update.message.caption or "–ü—Å–∏—Ö–æ–ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏–ª –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ"
        user_id = db.save_response(replied_message_id, response_text)
        if user_id:
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=TEXTS["psychologist_response"].format(response_text),
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)
    return ConversationHandler.END

def main():
    if not os.getenv('TELEGRAM_BOT_TOKEN'):
        logger.error("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        return
    
    if not os.getenv('DATABASE_URL'):
        logger.error("–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î!")
        return
    
    try:
        application = Application.builder().token(os.getenv('TELEGRAM_BOT_TOKEN')).build()
        
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", start), CallbackQueryHandler(button_handler)],
            states={
                WAITING_FOR_MESSAGE: [
                    MessageHandler(filters.TEXT | filters.VIDEO_NOTE, handle_message)
                ],
            },
            fallbacks=[CallbackQueryHandler(cancel, pattern="back_to_main")],
        )
        
        application.add_handler(conv_handler)
        application.add_handler(
            MessageHandler(
                (filters.TEXT | filters.VIDEO_NOTE) & ~filters.COMMAND & filters.Chat(PSYCHOLOGIST_GROUP_ID),
                handle_psychologist_response
            )
        )
        
        if os.getenv('WEBHOOK_URL'):
            PORT = int(os.environ.get('PORT', 5000))
            application.run_webhook(
                listen="0.0.0.0",
                port=PORT,
                webhook_url=os.getenv('WEBHOOK_URL')
            )
        else:
            application.run_polling()
            
    except telegram.error.Conflict as e:
        logger.error(f"–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == "__main__":
    main()